syntax = "proto3";

// A message to capture the periodic reporting of each server thread's local
// statistics; these are aggregated by the monioring system.
message ServerThreadStatistics {
  // What percentage of the server thread's storage capacity is being consumed.
  uint64 storage_consumption = 1;

  // What percentage of the server thread's compute capacity is being consumed.
  double occupancy = 2;

  // The server thread's reporting epoch.
  uint32 epoch = 3;

  // How many key accesses were serviced during this epoch.
  uint32 access_count = 4;

  // How much bytes were used for value cache
  uint64 value_cache_size = 5;

  // How many num of operations are hit by value cache
  uint64 value_cache_hit_count = 6;

  // How many num of operations are hit by shortcut cache
  uint64 shortcut_cache_hit_count = 7;

  // How many num of operations are hit by local log segments
  uint64 local_log_hit_count = 8;

  // How many num of operations are miss from cache
  uint64 cache_miss_count = 9;

  // Average latency by KVS to handle user requests
  double kvs_avg_latency = 10;

  // How many times threads were active to handle user requests
  //uint64 num_working = 11;

  // How many times threads were idle without handling user requests
  //uint64 num_idle = 12;
}

// A message to capture the access frequencies of individual keys for a
// particular server thread.
message KeyAccessData {
  // A mapping from an individual key to its access count.
  message KeyCount {
    // The key being tracked.
    string key = 1;

    // The number of times this key was accessed during this epoch.
    uint32 access_count = 2;
  }
  // A list of all the key access frequencies tracked during this epoch.
  repeated KeyCount keys = 1;
}

// An enum representing all the tiers DINOMO system supports -- currently, a
// memory tier and a storage tier.
enum Tier {
  TIER_UNSPECIFIED = 0;

  // The value for the memory tier.
  MEMORY = 1;

  // The value for the disk-based tier.
  STORAGE = 2;

  // The value for the routing tier.
  ROUTING = 3;
}

// A message to track which physical servers are a part of which DINOMO
// membership (memory, storage) tier.
message ClusterMembership {
  // The representation the servers comprising an individual tier.
  message TierMembership {
    // The IP addresses for an individual server -- the private/public IP
    // distinction is specific to EC2-based deployments.
    // As our DINOMO does not depend on EC2, this distinction should be removed
    message Server {
      // The public IP address for a server.
      string public_ip = 1;

      // The private IP address for a server.
      string private_ip = 2;
    }

    // The Tier represented by this message -- either MEMORY or STORAGE.
    Tier tier_id = 1;

    // The list of servers in this tier.
    repeated Server servers = 2;
  }

  // The set of all tiers in the system.
  repeated TierMembership tiers = 1;
}

// A message to track metadata about how large each key in the system is.
message KeySizeData {
  // The size metadata for an individual key.
  message KeySize {
    // The key for which size metadata is being reported.
    string key = 1;

    // The size of the above key.
    uint32 size = 2;
  }

  // The list of key size metadata tuples being reported.
  repeated KeySize key_sizes = 1;
}

// A message that captures the replication factor for an individual key.
message ReplicationFactor {
  // A message representing the replication level for a single key at a
  // single tier.
  message ReplicationValue {
    // The tier represented by this message.
    Tier tier = 1;

    // The replication level at this particular tier for this particular key.
    uint32 value = 2;
  }

  // The name of the key whose replication factor is being changed.
  string key = 1;

  // A set of mappings from individual tiers (MEMORY, STORAGE -- see Tier enum)
  // to the cross-machine replication factor at that tier.
  repeated ReplicationValue global = 2;

  // A set of mappings from individual tiers (MEMORY, STORAGE -- see Tier enum)
  // to the intra-machine replication factor at that tier.
  repeated ReplicationValue local = 3;
}

// A message to propagate changes to a set of keys' replication factors.
message ReplicationFactorUpdate {
  // The IP-port pair at which the monitor is waiting for the server's response.
  string response_address = 1;

  // A monitor-specific ID used to match asynchronous requests with responses.
  string request_id = 2;

  // The set of replication factor updates being sent.
  repeated ReplicationFactor updates = 3;
}

// A response to a ReplicationFactorUpdate. 
message ReplicationFactorUpdateResponse {
  // The request_id specified in the corresponding ReplicationFactorUpdate. 
  // Used to associate asynchornous requests and responses.
  string response_id = 1;
}

// A message to propagate "join" new node to existing nodes
message NodeJoinRequest {
  // The IP-port pair at which the memory server is waiting for the server's response.
  string response_address = 1;

  // A server-specific ID used to match asynchronous requests with responses.
  string request_id = 2;

  // Request details
  string request_msg = 3;
}

// A response to NodeJoinRequest
message NodeJoinRequestResponse {
  string response_address = 1;

  // The request_id specified in the corresponding NodeJoinRequest.
  // Used to associate asynchronous requests and responses.
  string response_id = 2;

  string request_id = 3;
}

message NodeJoinRequestUnblock {
  string response_id = 1;
}